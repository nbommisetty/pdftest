@startuml
title Online Banking Login Flow

actor User
participant Browser
participant "D1 Gateway" as D1Gateway
participant "D1 Connect" as D1Connect
participant IDP
participant ThreatMetrix
participant Twilio
participant "Enterprise Alert System" as EAS
participant "Google Firebase" as Firebase
participant "RedHat DataGrid" as RDG

' Device Profiling Step
' Browser's activity for sending the first message will be implicit.
Browser -> ThreatMetrix : Initiate Device Profiling (TMX Session ID)
activate ThreatMetrix
' ThreatMetrix is active, profiling device...

User -> Browser : Enters Credentials (username, password)
' Browser is implicitly active processing input and sending next request
Browser -> D1Gateway : Authentication Request (username, password)
activate D1Gateway

D1Gateway -> D1Connect : [POST] ValidateUsername (username)
activate D1Connect

D1Connect -> IDP : [POST] /wizard/login/username (username)
activate IDP

' IDP gets Risk Score from ThreatMetrix
IDP -> ThreatMetrix : SessionQuery API (TMX Session ID)
' ThreatMetrix was already active
ThreatMetrix --> IDP : Risk Score
' ThreatMetrix remains active for continuous device profiling throughout the session.
' deactivate ThreatMetrix ' Removed as profiling is continuous.

IDP --> D1Connect : Username Validation Response (nextStep: "VerifyPassword" OR "StepUp")
deactivate IDP

' D1Connect relays response to D1Gateway. D1Gateway inspects it.

alt Low Risk (nextStep == "VerifyPassword")
    D1Connect --> D1Gateway : Username Validation Response (nextStep: "VerifyPassword")
    ' D1Gateway acts on the "VerifyPassword" instruction
    D1Gateway -> D1Connect : [POST] ValidatePassword (password from initial request)
    ' Reactivate D1Connect for this new request
    activate D1Connect 
    D1Connect -> IDP : [POST] /wizard/login/password (password)
    ' Reactivate IDP
    activate IDP 

    ' IDP validates password. If it fails, IDP sends an alert to EAS.
    alt Password Validation by IDP results in Failure
        IDP -> EAS : Send Security Alert (Login Attempt Failed: Incorrect Password)
        activate EAS
        ' EAS would then handle sending the email to the customer (external process)
        ' EAS's direct involvement in this sequence ends.
        deactivate EAS 
        IDP --> D1Connect : Password Validation (Result: Failure)
    else Password Validation by IDP results in Success
        IDP --> D1Connect : Password Validation (Result: Success)
    end
    ' IDP's role in password validation is complete.
    deactivate IDP 

    D1Connect --> D1Gateway : Password Validation Status (Result)
    ' D1Connect is deactivated after relaying the status for password validation itself.
    ' It will be reactivated if tokens are requested or push notifications are sent.
    deactivate D1Connect

    alt Result == Failure ' This is D1Gateway checking the result received from D1Connect
        opt If user subscribed to Push Notifications
            note over D1Gateway : Triggering Push Notification (Login Failed)
            D1Gateway -> D1Connect : Trigger Push Notification (Login Failed: Incorrect Password)
            activate D1Connect
            D1Connect -> Firebase : Send Push (Login Failed: Incorrect Password) ' Async call
            activate Firebase
            Firebase --> User : Push Notification (Login Failed) ' Eventual delivery
            ' Firebase interaction for this call ends from D1Connect's perspective
            deactivate Firebase 
            D1Connect --> D1Gateway : Push Request Submitted (Ack)
            deactivate D1Connect
        end
        D1Gateway --> Browser : Error Response (Login Unsuccessful)
        Browser --> User : Notify: Login Not Successful
        deactivate D1Gateway
    else Result == Success ' Password validation was successful
        D1Gateway -> D1Connect : Get Tokens
        ' Reactivate D1Connect for token retrieval
        activate D1Connect 
        D1Connect -> IDP : [POST] /token (grant_type=password, username, password)
        ' Reactivate IDP for token issuance
        activate IDP 
        IDP --> D1Connect : AccessToken, IDToken
        deactivate IDP
        D1Connect --> D1Gateway : AccessToken, IDToken
        ' D1Connect is now active from token retrieval.
        
        opt If user subscribed to Push Notifications
            note over D1Gateway : Triggering Push Notification (Login Successful)
            D1Gateway -> D1Connect : Trigger Push Notification (Login Successful)
            ' D1Connect is already active from token retrieval or reactivated if previously deactivated.
            activate D1Connect 
            D1Connect -> Firebase : Send Push (Login Successful) ' Async call
            activate Firebase
            Firebase --> User : Push Notification (Login Successful) ' Eventual delivery
            ' Firebase interaction for this call ends from D1Connect's perspective
            deactivate Firebase 
            D1Connect --> D1Gateway : Push Request Submitted (Ack)
            ' D1Connect deactivates after handling push.
            deactivate D1Connect 
        end
        
        D1Gateway --> Browser : Login Success (Tokens/Session Cookie)
        ' D1Gateway is active. Comment "D1Gateway remains active to serve dashboard requests" applies.
        Browser --> User : Notify: Login Successful / Redirect to Dashboard
        ' Browser remains active for dashboard loading initially

        ' --- Dashboard Loading Sequence Starts Here ---
        note over Browser : User is on Dashboard page, loading widgets...

        == Fetch_Account_Details ==
            ' Browser is already active from login success / redirect
            Browser -> D1Gateway : [GET] /dashboard/accounts
            ' No explicit activate D1Gateway here as D1Gateway is already active from login success.
            D1Gateway -> D1Connect : Fetch Account Details
            ' D1Connect was previously deactivated, so this is fine.
            activate D1Connect 
            D1Connect --> D1Gateway : Account Details
            deactivate D1Connect
            D1Gateway --> Browser : Account Details ' Browser receives data
            ' Browser processes/displays data
            ' Deactivate D1Gateway after this specific widget call.
            deactivate D1Gateway 
        
        == Fetch_Upcoming_Transactions ==
            Browser -> D1Gateway : [GET] /dashboard/upcoming-transactions
            ' D1Gateway was deactivated after the previous widget, so this is fine.
            activate D1Gateway 
            D1Gateway -> D1Connect : Fetch Upcoming Transactions
            activate D1Connect
            D1Connect --> D1Gateway : Upcoming Transactions Data
            deactivate D1Connect
            D1Gateway --> Browser : Upcoming Transactions Data ' Browser receives data
            deactivate D1Gateway
        
        == Fetch_Notifications ==
            Browser -> D1Gateway : [GET] /dashboard/notifications
            activate D1Gateway
            D1Gateway -> D1Connect : Fetch Notifications
            activate D1Connect
            D1Connect --> D1Gateway : Notifications Data
            deactivate D1Connect
            D1Gateway --> Browser : Notifications Data ' Browser receives data
            deactivate D1Gateway
        
        == Fetch_Announcements ==
            Browser -> D1Gateway : [GET] /dashboard/announcements
            activate D1Gateway
            D1Gateway -> D1Connect : Fetch Announcements
            activate D1Connect
            D1Connect --> D1Gateway : Announcements Data
            deactivate D1Connect
            D1Gateway --> Browser : Announcements Data ' Browser receives data
            deactivate D1Gateway
        
        note over Browser
          Additional widgets (e.g., quick links, special offers)
          are fetched via similar request flows through D1Gateway and D1Connect.
        end note
        ' Dashboard loading concludes. D1Gateway was deactivated after the last widget call.
        ' Further interactions would reactivate it.
    end
else High Risk (nextStep == "StepUp")
    D1Connect --> D1Gateway : Username Validation Response (nextStep: "StepUp")
    ' D1Gateway receives "StepUp" instruction.
    ' Password captured from initial request needs to be stored.
    D1Gateway -> RDG : Store Encrypted Password (password, sessionKey)
    activate RDG
    RDG --> D1Gateway : Password Stored (Ack)
    deactivate RDG
    
    ' D1Gateway now proceeds with fetching OTP devices.
    D1Gateway -> D1Connect : [GET] GetOTPDevices
    ' Ensure D1Connect is active for StepUp
    activate D1Connect 
    D1Connect -> IDP : [GET] /users/otp-devices (or similar API)
    ' Reactivate IDP
    activate IDP 
    IDP --> D1Connect : OTP Devices List (voice, sms)
    deactivate IDP
    D1Connect --> D1Gateway : OTP Devices List
    deactivate D1Connect

    D1Gateway --> Browser : MFA Required (OTP Devices List)
    ' D1Gateway remains active to handle OTP verification
    Browser -> User : Display OTP Device Options (Select SMS or Voice)
    ' Browser active displaying options and awaiting selection
    
    User -> Browser : Submits Selected OTP Device
    ' Browser is already active or reactivates to process submission
    Browser -> D1Gateway : Send OTP Request (Selected Device)
    ' D1Gateway is already active
    D1Gateway -> D1Connect : Send OTP (Selected Device)
    activate D1Connect
    D1Connect -> IDP : Initiate OTP Delivery (Selected Device)
    activate IDP
    IDP -> Twilio : Deliver OTP (to Selected Device)
    activate Twilio
    Twilio --> User : OTP Code (via SMS/Voice)
    ' Twilio's role in this specific OTP send is done.
    deactivate Twilio 
    ' IDP and D1Connect remain active awaiting OTP validation
    
    User -> Browser : Enters Received OTP Code
    Browser -> D1Gateway : Validate OTP (OTP Code)
    ' D1Gateway is already active
    D1Gateway -> D1Connect : [POST] ValidateOTP (OTP Code)
    ' D1Connect is already active from Send OTP, or reactivate if necessary
    D1Connect -> IDP : [POST] /validate-otp (OTP Code)
    ' IDP is already active from Send OTP, or reactivate if necessary
    IDP -> Twilio : Verify OTP with Twilio (OTP Code) ' Assuming IDP checks with Twilio
    activate Twilio
    Twilio --> IDP : OTP Validation Status (Valid/Invalid)
    deactivate Twilio

    alt OTP Validation Status == Invalid
        IDP -> EAS : Send Security Alert (Invalid OTP Entered)
        activate EAS
        deactivate EAS
        IDP --> D1Connect : OTP Validation (Result: Failure)
        deactivate IDP
        D1Connect --> D1Gateway : OTP Validation (Result: Failure)
        ' D1Connect will be reactivated for push if needed
        deactivate D1Connect 
        
        opt If user subscribed to Push Notifications
            note over D1Gateway : Triggering Push Notification (Login Failed: Invalid OTP)
            D1Gateway -> D1Connect : Trigger Push Notification (Login Failed: Invalid OTP)
            activate D1Connect
            D1Connect -> Firebase : Send Push (Login Failed: Invalid OTP) ' Async call
            activate Firebase
            Firebase --> User : Push Notification (Login Failed) ' Eventual delivery
            ' Firebase interaction for this call ends from D1Connect's perspective
            deactivate Firebase 
            D1Connect --> D1Gateway : Push Request Submitted (Ack)
            deactivate D1Connect
        end
        
        D1Gateway --> Browser : Error Response (Invalid OTP)
        Browser --> User : Notify: Invalid OTP Entered
        ' End of this attempt for D1Gateway
        deactivate D1Gateway 
    else OTP Validation Status == Valid ' OTP is Valid
        IDP --> D1Connect : OTP Validation (Result: Success, nextStep: "ValidatePassword")
        ' Deactivated for OTP validation, will be reactivated for password validation.
        deactivate IDP 
        D1Connect --> D1Gateway : OTP Success, Instructs to Validate Password
        ' Deactivated for OTP flow, will be reactivated for password validation.
        deactivate D1Connect 
        
        note over D1Gateway
            OTP Validation Successful.
            Proceeding to Validate Password.
            Password will be retrieved from RDG.
        end note
        
        ' D1Gateway retrieves password from RDG before validating
        D1Gateway -> RDG : Retrieve Encrypted Password (sessionKey)
        activate RDG
        RDG --> D1Gateway : Encrypted Password
        deactivate RDG
        
        ' D1Gateway initiates password validation as per the "Low Risk" flow, using retrieved password
        D1Gateway -> D1Connect : [POST] ValidatePassword (retrieved encrypted password)
        activate D1Connect
        ' Subsequent steps (D1Connect -> IDP for password, IDP response, token issuance or failure,
        ' push notifications, and dashboard loading on success) follow the "Low Risk" path.
        ' For brevity, these are not fully repeated here but would be similar to the
        ' "Low Risk (nextStep == "VerifyPassword")" section.
        ' Example: D1Connect -> IDP : [POST] /wizard/login/password (retrieved password)
        ' ... then handling of success/failure as in the low risk path ...
    end
end

' D1Gateway's final deactivation depends on the overall outcome of the login attempt or subsequent user actions.

@enduml
